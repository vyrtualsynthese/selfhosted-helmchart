apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "postgres.fullname" . }}
  labels:
    {{- include "postgres.labels" . | nindent 4 }}
spec:
  strategy:
    type: {{ .Values.strategyType | default "Recreate" }}
  selector:
    matchLabels:
      {{- include "postgres.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "postgres.labels" . | nindent 8 }}
 {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "postgres.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
      - name: {{ .Chart.Name }}
        securityContext:
          {{- toYaml .Values.securityContext | nindent 12 }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        ports:
          - name: http
            containerPort: {{ .Values.service.port }}
            protocol: TCP
        {{- if .Values.configs}}
        envFrom:
        {{- if not .Values.configs.existingSecret }}
        - configMapRef:
            name: {{ template "postgres.fullname" . }}-config
        {{- else }}
        - secretRef:
            name: {{ .Values.configs.existingSecret }}
        {{- end }}
        {{- end }}
        resources:
          {{- toYaml .Values.resources | nindent 12 }}
        volumeMounts:
          - name: db-storage
            mountPath: /var/lib/postgresql/data
        {{- with .Values.volumeMounts }}
          {{- toYaml . | nindent 12 }}
        {{- end }}
        startupProbe:
          exec:
            command:
              - /bin/sh
              - -c
              - exec pg_isready -U {{ default "postgres" .Values.configs.POSTGRES_USER | quote }} -d "dbname={{ .Values.configs.POSTGRES_DB }}" -h 127.0.0.1 -p {{ .Values.service.port }}
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 1
          failureThreshold: 15
          successThreshold: 1
        livenessProbe:
          exec:
            command:
              - /bin/sh
              - -c
              - exec pg_isready -U {{ default "postgres" .Values.configs.POSTGRES_USER | quote }} -d "dbname={{ .Values.configs.POSTGRES_DB }}" -h 127.0.0.1 -p {{ .Values.service.port }}
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 6
          successThreshold: 1
        readinessProbe:
          exec:
            command:
              - /bin/sh
              - -c
              - exec pg_isready -U {{ default "postgres" .Values.configs.POSTGRES_USER | quote }} -d "dbname={{ .Values.configs.POSTGRES_DB }}" -h 127.0.0.1 -p {{ .Values.service.port }}
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 6
          successThreshold: 1
      volumes:
        - name: db-storage
          persistentVolumeClaim:
            claimName: {{ default (printf (include "postgres.fullname" .)) .Values.storage.existingClaim }}
      {{- with .Values.volumes }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
       {{- toYaml . | nindent 8 }}
     {{- end }}
     {{- with .Values.affinity }}
      affinity:
       {{- toYaml . | nindent 8 }}
     {{- end }}
     {{- with .Values.tolerations }}
      tolerations:
       {{- toYaml . | nindent 8 }}
     {{- end }}
